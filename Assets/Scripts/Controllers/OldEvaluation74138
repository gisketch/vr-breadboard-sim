    private ExperimentResult Evaluate74138To8LED(
        SimulationResult simResult,
        ExperimentDefinition experiment,
        JToken components)
    {
        var result = new ExperimentResult
        {
            ExperimentName = experiment.Name,
            ExperimentId = experiment.Id,
            TotalInstructions = experiment.TotalInstructions,
            MainInstruction = experiment.InstructionDescriptions[CurrentInstructionIndex],
            InstructionResults = new Dictionary<int, bool>(),
            Messages = new List<string>(),
            IsSetupValid = true
        };

        // Count components and validate types
        int ic74138Count = 0;
        int ledCount = 0;
        int dipSwitchCount = 0;

        string mainIc = "";
        List<string> mainLeds = new List<string>();

        // Get component data
        dynamic ic74138State = null;
        List<dynamic> ledStates = new List<dynamic>();

        foreach (var comp in simResult.ComponentStates)
        {
            if (comp.Key.StartsWith("ic"))
            {
                dynamic dynamicValue = comp.Value; // {type: "IC74138", address: {A0: bool, A1: bool, A2: bool}, ...}
                string typeValue = dynamicValue.type; // IC74138

                if (typeValue == "IC74138")
                {
                    ic74138Count++;
                    ic74138State = dynamicValue;
                    mainIc = comp.Key;
                }
            }
            else if (comp.Key.StartsWith("led"))
            {
                dynamic dynamicValue = comp.Value;
                ledCount++;
                mainLeds.Add(comp.Key);
                ledStates.Add(comp.Value);
            }
            else if (comp.Key.StartsWith("dipSwitch"))
            {
                dipSwitchCount++;
            }
        }

        // Validate component counts
        if (ic74138Count != 1)
        {
            result.Messages.Add($"Expected exactly 1 IC 74138, found {ic74138Count}");
            result.IsSetupValid = false;
        }

        if (ledCount < 8)
        {
            result.Messages.Add($"Expected at least 8 LEDs, found {ledCount}");
            result.IsSetupValid = false;
        }

        if (dipSwitchCount < 3)
        {
            result.Messages.Add($"Expected at least 3 DIP switches, found {dipSwitchCount}");
            result.IsSetupValid = false;
        }

        // Only proceed with detailed checks if basic components are present
        if (ic74138State != null && ledCount > 7 && dipSwitchCount > 2)
        {

            // Check IC 74138 enable pins (e1, e2, e3)
            bool e1Active = false;
            bool e2Active = false;
            bool e3Active = false;

            try
            {
                e1Active = ic74138State.enable.E1;
                e2Active = ic74138State.enable.E2;
                e3Active = ic74138State.enable.E3;
            }
            catch (Exception)
            {
                result.Messages.Add("Cannot access IC 74138 enable pins");
                result.IsSetupValid = false;
            }

            // Add individual messages for each enable pin
            if (!e1Active)
            {
                result.Messages.Add("IC 74138 E1 pin must be set to LOW");
                result.IsSetupValid = false;
            }

            if (!e2Active)
            {
                result.Messages.Add("IC 74138 E2 pin must be set to LOW");
                result.IsSetupValid = false;
            }

            if (!e3Active)
            {
                result.Messages.Add("IC 74138 E3 pin must be set to HIGH");
                result.IsSetupValid = false;
            }

            // Check if all LEDs are grounded
            bool ledsGrounded = true;
            foreach (dynamic ledState in ledStates)
            {
                if (!ledState.grounded)
                {
                    ledsGrounded = false;
                    break;
                }
            }


            if (!ledsGrounded)
            {
                result.Messages.Add("LEDS are not properly grounded");
                result.IsSetupValid = false;
            }

            // Check if IC has uninitialized inputs
            string status = "";
            try
            {
                status = ic74138State.status;

                if (status == "Uninitialized inputs")
                {
                    result.Messages.Add("IC 74138 has uninitialized inputs. Check DIP switch connections.");
                    result.IsSetupValid = false;
                }
            }
            catch (Exception)
            {
                Debug.Log("No status");
            }

            // Extract ic
            JToken icComp = null;
            List<JToken> ledComps = new List<JToken>();
            List<JToken> ledsConnectedToIc = new List<JToken>();

            foreach (JProperty componentProp in components)
            {
                if (componentProp.Name.Equals(mainIc))
                {
                    icComp = componentProp.Value;
                }
                else if (componentProp.Name.StartsWith("led"))
                {
                    ledComps.Add(componentProp.Value);
                }
            }

            // Check if required components are found
            if (icComp == null)
            {
                result.Messages.Add("Missing IC");
                result.IsSetupValid = false;
            }

            string[] outputPins = new string[] {
                "pin15", "pin14", "pin13", "pin12",
                "pin11", "pin10", "pin9", "pin7"
            };

            // Check all required connections
            bool allConnected = true;

            foreach (string pin in outputPins)
            {
                foreach (JToken ledComp in ledComps)
                {
                    string pinValue = icComp[pin]?.ToString();
                    string anodeValue = ledComp["anode"]?.ToString();

                    bool isConnected = AreNodesConnected(pinValue, anodeValue, simResult.Nets);
                    if (isConnected)
                    {
                        ledsConnectedToIc.Add(ledComp["ledId"]?.ToString());
                    }
                }
            }

            if (ledsConnectedToIc.Count != 8) allConnected = false;

            if (!allConnected)
            {
                result.Messages.Add("IC74138 outputs are not properly connected to LEDs.");
                result.IsSetupValid = false;
            }
        }

        // Only evaluate the experiment if the setup is valid
        if (result.IsSetupValid)
        {
            // Get expected A0 A1 A2 input for current instruction (000 to 111)
            bool[] expectedBits = new bool[3];
            for (int i = 0; i < 3; i++)
            {
                expectedBits[i] = ((CurrentInstructionIndex >> i) & 1) == 1;
            }

            // Get actual IC inputs
            bool inputA0 = false, inputA1 = false, inputA2 = false;
            try
            {
                inputA0 = ic74138State.address.A0;
                inputA1 = ic74138State.address.A1;
                inputA2 = ic74138State.address.A2;
            }
            catch (Exception)
            {
                result.Messages.Add("Cannot evaluate: IC inputs not found in simulation result");
                result.InstructionResults[CurrentInstructionIndex] = false;
                return result;
            }

            // Compare expected and actual inputs
            bool[] actualBits = new[] { inputA0, inputA1, inputA2 };
            bool allMatch = true;

            for (int i = 0; i < 3; i++)
            {
                if (actualBits[i] != expectedBits[i])
                {
                    allMatch = false;
                    break;
                }
            }

            result.InstructionResults[CurrentInstructionIndex] = allMatch;

            if (allMatch)
            {
                // Mark instruction as completed
                _completedInstructions[experiment.Id].Add(CurrentInstructionIndex);
                result.CompletedInstructions = _completedInstructions[experiment.Id].Count;

                NextInstruction();
            }
        }

        return result;
    }
}


    private ExperimentResult EvaluateBCDTo7SegmentExperiment(
        SimulationResult simResult,
        ExperimentDefinition experiment,
        JToken components)
    {
        var result = new ExperimentResult
        {
            ExperimentName = experiment.Name,
            ExperimentId = experiment.Id,
            TotalInstructions = experiment.TotalInstructions,
            MainInstruction = experiment.InstructionDescriptions[CurrentInstructionIndex],
            InstructionResults = new Dictionary<int, bool>(),
            Messages = new List<string>(),
            IsSetupValid = true
        };

        // Count components and validate types
        int ic7448Count = 0;
        int sevenSegCount = 0;
        int dipSwitchCount = 0;

        string mainIc = "";
        string mainSevenSeg = "";

        // Get component data
        dynamic ic7448State = null;
        dynamic sevenSegState = null;

        foreach (var comp in simResult.ComponentStates)
        {
            if (comp.Key.StartsWith("ic"))
            {
                dynamic dynamicValue = comp.Value;
                string typeValue = dynamicValue.type;

                if (typeValue == "IC7448")
                {
                    ic7448Count++;
                    ic7448State = dynamicValue;
                    mainIc = comp.Key;
                }
            }
            else if (comp.Key.StartsWith("sevenSeg"))
            {
                sevenSegCount++;
                sevenSegState = comp.Value;
                mainSevenSeg = comp.Key;
            }
            else if (comp.Key.StartsWith("dipSwitch"))
            {
                dipSwitchCount++;
            }
        }

        // Validate component counts
        if (ic7448Count != 1)
        {
            result.Messages.Add($"Expected exactly 1 IC 7448, found {ic7448Count}");
            result.IsSetupValid = false;
        }

        if (sevenSegCount != 1)
        {
            result.Messages.Add($"Expected exactly 1 seven-segment display, found {sevenSegCount}");
            result.IsSetupValid = false;
        }

        if (dipSwitchCount < 4)
        {
            result.Messages.Add($"Expected at least 4 DIP switches, found {dipSwitchCount}");
            result.IsSetupValid = false;
        }

        // Only proceed with detailed checks if basic components are present
        if (ic7448State != null && sevenSegState != null)
        {
            // Check if 7-segment is grounded
            bool sevenSegGrounded = false;
            try
            {
                sevenSegGrounded = sevenSegState.grounded;
            }
            catch (Exception)
            {
                result.Messages.Add("Cannot access seven-segment grounding status");
                result.IsSetupValid = false;
            }

            if (!sevenSegGrounded)
            {
                result.Messages.Add("Seven-segment display is not properly grounded");
                result.IsSetupValid = false;
            }

            // Check IC 7448 control pins (LT, BI_RBO, RBI)
            bool ltActive = false;
            bool biRboActive = false;
            bool rbiActive = false;

            try
            {
                ltActive = ic7448State.control.LT;
                biRboActive = ic7448State.control.BI_RBO;
                rbiActive = ic7448State.control.RBI;
            }
            catch (Exception)
            {
                result.IsSetupValid = false;
            }

            // Add individual messages for each control pin
            if (!ltActive)
            {
                result.Messages.Add("IC 7448 LT pin must be set to HIGH");
                result.IsSetupValid = false;
            }

            if (!biRboActive)
            {
                result.Messages.Add("IC 7448 BI_RBO pin must be set to HIGH");
                result.IsSetupValid = false;
            }

            if (!rbiActive)
            {
                result.Messages.Add("IC 7448 RBI pin must be set to HIGH");
                result.IsSetupValid = false;
            }

            // Check if IC has uninitialized inputs
            string status = "";
            try
            {
                status = ic7448State.status;

                if (status == "Uninitialized inputs")
                {
                    result.Messages.Add("IC 7448 has uninitialized inputs. Check DIP switch connections.");
                    result.IsSetupValid = false;
                }
            }
            catch (Exception)
            {
                Debug.Log("No status");
            }

            // Extract ic1 and sevenSeg1 objects
            JToken icComp = null;
            JToken sevenSegComp = null;

            foreach (JProperty componentProp in components)
            {
                if (componentProp.Name.Equals(mainIc))
                {
                    icComp = componentProp.Value;
                }
                else if (componentProp.Name.Equals(mainSevenSeg))
                {
                    sevenSegComp = componentProp.Value;
                }
            }

            // Check if required components are found
            if (icComp == null || sevenSegComp == null)
            {
                result.Messages.Add("Missing IC and Seven Segment components.");
                result.IsSetupValid = false;
            }

            // Define all the connections that need to be checked
            Dictionary<string, string> connectionChecks = new Dictionary<string, string>
                {
                    { "pin13", "nodeA" },
                    { "pin12", "nodeB" },
                    { "pin11", "nodeC" },
                    { "pin10", "nodeD" },
                    { "pin9", "nodeE" },
                    { "pin14", "nodeG" },
                    { "pin15", "nodeF" }
                };

            // Check all required connections
            bool allConnected = true;

            foreach (var check in connectionChecks)
            {
                string pinKey = check.Key;
                string nodeKey = check.Value;

                string pinValue = icComp[pinKey]?.ToString();
                string nodeValue = sevenSegComp[nodeKey]?.ToString();

                if (string.IsNullOrEmpty(pinValue) || string.IsNullOrEmpty(nodeValue))
                {
                    allConnected = false;
                    continue;
                }

                if (!AreNodesConnected(pinValue, nodeValue, simResult.Nets))
                {
                    allConnected = false;
                }
            }

            if (!allConnected)
            {
                result.Messages.Add("IC7448 outputs are not properly connected to Seven Segment inputs.");
                result.IsSetupValid = false;
            }
        }

        // Only evaluate the experiment if the setup is valid
        if (result.IsSetupValid)
        {
            // Get expected BCD input for current instruction (0000 to 1111)
            bool[] expectedBits = new bool[4];
            for (int i = 0; i < 4; i++)
            {
                expectedBits[i] = ((CurrentInstructionIndex >> i) & 1) == 1;
            }

            // Get actual IC inputs
            bool inputA = false, inputB = false, inputC = false, inputD = false;
            try
            {
                inputA = ic7448State.inputs.A;
                inputB = ic7448State.inputs.B;
                inputC = ic7448State.inputs.C;
                inputD = ic7448State.inputs.D;
            }
            catch (Exception)
            {
                result.Messages.Add("Cannot evaluate: IC inputs not found in simulation result");
                result.InstructionResults[CurrentInstructionIndex] = false;
                return result;
            }

            // Compare expected and actual inputs
            bool[] actualBits = new[] { inputA, inputB, inputC, inputD };
            bool allMatch = true;

            for (int i = 0; i < 4; i++)
            {
                if (actualBits[i] != expectedBits[i])
                {
                    allMatch = false;
                    break;
                }
            }

            result.InstructionResults[CurrentInstructionIndex] = allMatch;

            if (allMatch)
            {
                // Mark instruction as completed
                _completedInstructions[experiment.Id].Add(CurrentInstructionIndex);
                result.CompletedInstructions = _completedInstructions[experiment.Id].Count;

                NextInstruction();
            }

        }

        return result;
    }